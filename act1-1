#include <iostream>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

using namespace std;

#define NUM_THREADS 8
#define MAX 1000000

int data[MAX];
long global_sum = 0;

void sum(int tid)
{
    long sum = 0;
    int range = MAX / NUM_THREADS;
    int start = tid * range;
    int end = start + range;

    #pragma omp parallel for reduction(+:sum)
    for (int i = start; i < end; i++) {
        sum += ::data[i];
    }

    #pragma omp critical
    global_sum += sum;
}

int main(int argc, char *argv[])
{
    int cores = omp_get_max_threads();

    cout << "The number of cores on this machine = " << cores << endl;

    srand(time(NULL));
    for (int i = 0; i < MAX; i++) {
        ::data[i] = rand() % 20;
    }

    #pragma omp parallel num_threads(NUM_THREADS)
    {
        sum(omp_get_thread_num());
    }

    cout << "The final sum = " << global_sum << endl;

    return 0;
}
