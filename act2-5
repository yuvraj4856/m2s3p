#include <iostream>
#include <vector>
#include <chrono>
#include <omp.h>

int main()
{
    std::vector<int> v(100000000, 1);
    int sum = 0;

    auto start_time = std::chrono::high_resolution_clock::now();

    #pragma omp parallel for schedule(static, 10000) reduction(+:sum)
    for (int i = 0; i < v.size(); i++) {
        sum += v[i];
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);

    std::cout << "The sum of all elements in the vector is: " << sum << std::endl;
    std::cout << "Execution time: " << duration.count() << " ms" << std::endl;

    return 0;
}
