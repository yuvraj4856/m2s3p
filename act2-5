#include <iostream>
#include <omp.h>
using namespace std;

#define SIZE 1000000

int v3[SIZE];

int main() {
    int total = 0;
    // initialize v3
    for(int i = 0; i < SIZE; i++) {
        v3[i] = i % 10;
    }
    // static scheduling with default chunk size
    #pragma omp parallel for reduction(+:total) schedule(static)
    for(int i = 0; i < SIZE; i++) {
        total += v3[i];
    }
    cout << "Total sum (static): " << total << endl;

    total = 0;
    // static scheduling with chunk size 100
    #pragma omp parallel for reduction(+:total) schedule(static, 100)
    for(int i = 0; i < SIZE; i++) {
        total += v3[i];
    }
    cout << "Total sum (static, 100): " << total << endl;

    total = 0;
    // dynamic scheduling with default chunk size
    #pragma omp parallel for reduction(+:total) schedule(dynamic)
    for(int i = 0; i < SIZE; i++) {
        total += v3[i];
    }
    cout << "Total sum (dynamic): " << total << endl;

    total = 0;
    // dynamic scheduling with chunk size 100
    #pragma omp parallel for reduction(+:total) schedule(dynamic, 100)
    for(int i = 0; i < SIZE; i++) {
        total += v3[i];
    }
    cout << "Total sum (dynamic, 100): " << total << endl;

    return 0;
}
